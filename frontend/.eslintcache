[{"/home/davorin/workspaces/iot-mas-services/frontend/src/index.js":"1","/home/davorin/workspaces/iot-mas-services/frontend/src/components/Utils.jsx":"2","/home/davorin/workspaces/iot-mas-services/frontend/src/components/ServiceCenters/ServiceCenters.jsx":"3","/home/davorin/workspaces/iot-mas-services/frontend/src/components/ServiceCenters/ModalsCenters.jsx":"4","/home/davorin/workspaces/iot-mas-services/frontend/src/components/ServiceCenters/ModalsServices.jsx":"5"},{"size":974,"mtime":1612641968114,"results":"6","hashOfConfig":"7"},{"size":826,"mtime":1612097853336,"results":"8","hashOfConfig":"7"},{"size":5832,"mtime":1612650140210,"results":"9","hashOfConfig":"7"},{"size":5175,"mtime":1612650495363,"results":"10","hashOfConfig":"7"},{"size":7351,"mtime":1612650832983,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1wkinml",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/home/davorin/workspaces/iot-mas-services/frontend/src/index.js",[],["25","26"],"/home/davorin/workspaces/iot-mas-services/frontend/src/components/Utils.jsx",[],"/home/davorin/workspaces/iot-mas-services/frontend/src/components/ServiceCenters/ServiceCenters.jsx",["27","28"],"import React from 'react';\nimport { Col, InputGroup, FormControl, Container, Row, Table } from 'react-bootstrap';\nimport { FaSearch } from 'react-icons/fa';\n\nimport { trackPromise } from \"react-promise-tracker\";\nimport axios from 'axios';\n\nimport { LoadingIcon } from '..//Utils';\nimport MOCKED_SERVICES from '../../data/mocked/services.json';\nimport { AddServiceCenter, DeleteServiceCenter } from './ModalsCenters';\nimport { AddServiceToServiceCenter, ListServiceCenterServices, DeleteServiceFromServiceCenter } from './ModalsServices';\n\nconst SERVICE_CENTERS_URL = \"/api/v1/service-centres\";\n\nclass ServiceCenters extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            numberOfCentersToShow: 20,\n            searchTerm: \"\",\n            serviceCenters: [],\n        }\n    }\n\n    componentDidMount() {\n        trackPromise(\n            axios.get(SERVICE_CENTERS_URL)\n                .then(response => {\n                    this.setState({ serviceCenters: response.data || [] });\n                })\n                .catch(error => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        this.setState({ serviceCenters: MOCKED_SERVICES })\n                    }\n                    console.log(error);\n                })\n            , \"loading-centers\");\n    }\n\n    refreshData = () => {\n        axios.get(SERVICE_CENTERS_URL)\n                .then(response => {\n                    this.setState({ serviceCenters: response.data || [] });\n                })\n                .catch(error => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        this.setState({ serviceCenters: MOCKED_SERVICES })\n                    }\n                    console.log(error);\n                });\n    }\n\n    simpleUpdateFieldValue = e => {\n        this.setState({ ...this.state, [e.target.name]: e.target.value });\n    }\n\n    filterCenters = () => {\n        let searchTerm = this.state.searchTerm ? this.state.searchTerm.toLowerCase() : \"\";\n        let results = this.state.serviceCenters || [];\n        results = results.filter(center => {\n            return center.name.toLowerCase().includes(searchTerm) ||\n                center.address.street.toLowerCase().includes(searchTerm) ||\n                center.address.postNumber == searchTerm ||\n                center.address.city.toLowerCase().includes(searchTerm) ||\n                center.contact.phone.toLowerCase().includes(searchTerm) ||\n                center.contact.email.toLowerCase().includes(searchTerm)\n        });\n        return results;\n    }\n\n    incrementNumberOfServicesToShow = () => {\n        this.setState({\n            numberOfCentersToShow: this.state.numberOfCentersToShow + 10\n        });\n    }\n\n    render() {\n        let filteredCenters = this.filterCenters();\n\n        return (\n            <Container>\n                <Row>\n                    <Col sm md lg=\"8\">\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text><FaSearch /></InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <FormControl placeholder=\"Pretraži\" name=\"searchTerm\" onChange={this.simpleUpdateFieldValue} />\n                        </InputGroup>\n                    </Col>\n                    <Col>\n                        <AddServiceCenter refreshData={this.refreshData} />\n                    </Col>\n                </Row>\n                <Row className=\"mt-5\">\n                    <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Naziv</th>\n                                <th>Ulica i kućni broj</th>\n                                <th>Poštanski broj</th>\n                                <th>Mjesto</th>\n                                <th>Telefon</th>\n                                <th>Email</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.serviceCenters ? filteredCenters.slice(0, this.state.numberOfCentersToShow).map((center, index) => (\n                                    <tr key={center.id}>\n                                        <td>{center.name}</td>\n                                        <td>{center.address.street}</td>\n                                        <td>{center.address.postNumber}</td>\n                                        <td>{center.address.city}</td>\n                                        <td>{center.contact.phone}</td>\n                                        <td>{center.contact.email}</td>\n                                        <td width=\"1%\" style={{ whiteSpace: \"nowrap\" }}>\n                                            <ListServiceCenterServices refreshData={this.refreshData} center={center} />&nbsp;\n                                            <AddServiceToServiceCenter refreshData={this.refreshData} center={center} />&nbsp;\n                                            <DeleteServiceCenter refreshData={this.refreshData} center={center} />\n                                        </td>\n                                    </tr>\n\n                                )) : undefined\n                            }\n\n                        </tbody>\n                    </Table>\n                    <p hidden={filteredCenters.length < this.state.numberOfCentersToShow} className=\"text-primary mb-4\" style={{ textAlign: \"center\" }} onClick={this.incrementNumberOfServicesToShow}>Load more...</p>\n                    <LoadingIcon area=\"loading-centers\" />\n                </Row>\n            </Container>\n\n        )\n    }\n}\n\nexport default ServiceCenters;\n","/home/davorin/workspaces/iot-mas-services/frontend/src/components/ServiceCenters/ModalsCenters.jsx",[],"/home/davorin/workspaces/iot-mas-services/frontend/src/components/ServiceCenters/ModalsServices.jsx",["29"],"import React, { useState } from 'react';\nimport { trackPromise } from \"react-promise-tracker\";\nimport axios from 'axios';\n\nimport { Button, Modal, Form, Table } from 'react-bootstrap';\nimport { FaList, FaPlus, FaSave, FaTrash } from 'react-icons/fa';\n\nimport { LoadingScreen } from '..//Utils';\n\nconst SERVICE_CENTERS_URL = \"/api/v1/service-centres\";\n\nexport function ListServiceCenterServices(props) {\n    const [show, setShow] = useState(false);\n\n    const handleClose = (e) => setShow(false);\n    const handleShow = () => setShow(true);\n    return (\n        <>\n            <Button size=\"sm\" variant=\"primary\" onClick={handleShow}><FaList /></Button>\n\n            <Modal show={show} backdrop=\"static\" onHide={handleClose} size=\"lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Popis usluga </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                <Table striped bordered hover>\n                        <thead>\n                            <tr>\n                                <th>Naziv uređaja</th>\n                                <th>Opis uređaja</th>\n                                <th>Cijena (HRK)</th>\n                                <th>Trajanje (HRK)</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                props.center && props.center.services ? props.center.services.map((service, index) => (\n                                    <tr key={service.id}>\n                                        <td>{service.device.name}</td>\n                                        <td>{service.device.description}</td>\n                                        <td>{service.price}</td>\n                                        <td>{service.time}</td>\n                                        <td width=\"1%\" style={{ whiteSpace: \"nowrap\" }}>\n                                            <DeleteServiceFromServiceCenter center={props.center} service={service} refreshData={props.refreshData} />\n                                        </td>\n                                    </tr>\n\n                                )) : undefined\n                            }\n                        </tbody>\n                    </Table>\n                    { props.services ? props.services.map(item => {\n                        <p>{item}</p>\n                    }) \n                    : undefined\n                    }\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>Zatvori</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <LoadingScreen area=\"loading-screen\" />\n        </>\n    );\n}\n\nexport function AddServiceToServiceCenter(props) {\n    const [show, setShow] = useState(false);\n    const [validated, setValidated] = useState(false);\n\n    const handleClose = (e) => {\n        setShow(false);\n        setValidated(false);\n    }\n    const handleShow = () => setShow(true);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        let form = e.target.closest(\"form\");\n        let data = new FormData(form);\n\n        setValidated(true);\n        if (form.checkValidity() === false) {\n            return;\n        }\n\n        trackPromise(\n            axios.post(`${SERVICE_CENTERS_URL}/${props.center.id}/services`, data, {})\n                .then(response => {\n                    console.log(response);\n                    setShow(false);\n                    setValidated(false);\n                    form.reset();\n                    props.refreshData();\n                }).catch(error => console.log(error)),\n            \"loading-screen\"\n        );\n    }\n\n    return (\n        <>\n            <Button size=\"sm\" variant=\"success\" onClick={handleShow}><FaPlus /></Button>\n\n            <Modal show={show} backdrop=\"static\" onHide={handleClose}>\n                <Form noValidate validated={validated} onSubmit={handleSubmit} >\n                    <Modal.Header closeButton>\n                        <Modal.Title>Dodaj uslugu</Modal.Title>\n                    </Modal.Header>\n\n                    <Modal.Body>\n                        <Form.Group>\n                            <Form.Label>Naziv uređaja</Form.Label>\n                            <Form.Control name=\"device.name\" required />\n                            <Form.Control.Feedback type=\"invalid\">Molimo upišite naziv uređaja.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Opis uređaja</Form.Label>\n                            <Form.Control name=\"device.description\" />\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Cijena usluge (HRK)</Form.Label>\n                            <Form.Control type=\"number\" min=\"1\" name=\"price\" required />\n                            <Form.Control.Feedback type=\"invalid\">Molimo upišite ispravan broj pošte.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Trajanje izvršenja usluge (min)</Form.Label>\n                            <Form.Control type=\"number\" min=\"1\" name=\"time\" required />\n                            <Form.Control.Feedback type=\"invalid\">Molimo upišite trajanje izvršenja usluge.</Form.Control.Feedback>\n                        </Form.Group>\n                    </Modal.Body>\n\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" onClick={handleClose}>Odustani</Button>\n                        <Button variant=\"primary\" type=\"submit\"><FaSave /> Spremi</Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n\n            <LoadingScreen area=\"loading-screen\" />\n        </>\n    );\n}\n\n\n\nexport function DeleteServiceFromServiceCenter(props) {\n    const [show, setShow] = useState(false);\n\n    const handleClose = (e) => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        trackPromise(\n            axios.delete(`${SERVICE_CENTERS_URL}/${props.center.id}/services/${props.service.id}`)\n                .then(response => {\n                    console.log(response);\n                    setShow(false);\n                    props.refreshData();\n                }).catch(error => console.log(error)),\n            \"loading-screen\"\n        );\n    }\n\n    return (\n        <>\n            <Button size=\"sm\" variant=\"danger\" onClick={handleShow}><FaTrash /></Button>\n\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Obriši uslugu: ? </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p>Jesi li siguran da želiš obrisati uslugu?</p>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>Odustani</Button>\n                    <Button variant=\"danger\" onClick={handleSubmit}><FaTrash /> Obriši</Button>\n                </Modal.Footer>\n            </Modal>\n\n            <LoadingScreen area=\"loading-screen\" />\n        </>\n    );\n}",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":11,"column":64,"nodeType":"36","messageId":"37","endLine":11,"endColumn":94},{"ruleId":"38","severity":1,"message":"39","line":63,"column":43,"nodeType":"40","messageId":"41","endLine":63,"endColumn":45},{"ruleId":"42","severity":1,"message":"43","line":53,"column":64,"nodeType":"44","messageId":"45","endLine":53,"endColumn":66},"no-native-reassign",["46"],"no-negated-in-lhs",["47"],"no-unused-vars","'DeleteServiceFromServiceCenter' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]